
More useful AST / PSI (to be used in later stages):

Problems (incomplete):
- repetitions are stored in an explicit head/tail list
- information about the reduced alternative is lost

Variant 1:
- build a different AST
	- e.g. build multiple sibling AST nodes for a repetition
	- would only require simple changes to the marker generation in the LR parser

Variant 2:
- build a different PSI from the same AST
	- would require to use another PSI class than the recommended base class
			(cannot navigate the PSI by navigating the AST, then mapping to PSI)
		- but it's unclear how "strict" that recommendation is
	- custom PSI classes must still support PSI node traversal; would probably end
		with a totally self-contained PSI that only links to AST nodes but does not
		use the AST for traversal. Is there anything else in IntelliJ that does it
		that way? Does this sound useful? Why does IntelliJ even separate AST and PSI?

Variant 3:
- provide higher-level access using methods in the PSI classes
	- useful anyway, even with Variant 1 or 2, since even with a more useful PSI
		structure, access is still complicated

nest steps:
- find pros / cons for variant 2, possibly ruling it out
- check for variant 1 + corresponding PSI being built + accessors as in variant 3
- check for variant 3 only
- accessors, visitor support, or both?
	- probably both.
		- Visitor-only is cumbersome when specific parts shall be accessed
			and to handle higher-level nodes differently than lower-level nodes
		- accessor-only is cumbersome when all nodes shall be iterated
		- also, because support for both *can* be generated, it *should be.
			Anything that can be automated and helps with manually written code
			is good.
	- this also means that the decision between "variant 3 only" or "v 1+3" is
		an implementation decision. Manually written code only uses the API presented
		by the PSI nodes.

--->

- result: there doesn't seem to be any significant PSI implementation outside the
    ASTWrapperPsiElement hierarchy, except special cases that aren't normal PSI nodes.
    --> rules out variant #2.

- I don't really care about the AST and PSI structure as long as the PSI nodes have nice accessors.
    So let's first try variant #3, and only include #1 if necessary. Support both accessors
    and visitors in #3.

- Recognize specific grammar structures for the PSI
    - from the extended grammar
        - structures are explicit, e.g. repetition
        - but possibly not all. If the literal syntax for the repetition is complex, it might be non-obvious
        - even more so for optionals
    - from the canonical grammar
        - recognizes repetition that was written in the implicit form
        - might recognize repetition that wasn't thought of as repetition by the grammar author
- problem with both: If the grammar is changed, the PSI might be changed automatically even though it should stay the
    same
    --> let's see if this is really a problem
-->
First attempt is from the canonical grammar since it simplifies handling in the parser -- no need to add further
meta-data to the canonical grammar.

Problem: No easy way to name alternatives.
    - anything using a colon as separator might be confused with naming a single sequence element
    - wrapping the whole alternative (except the precedence specifier) in parentheses, appending colon-name should
        work. It's ugly but probably the most useful thing since its meaning is obvious.
    -->
    - Problem: An alternative might consist of a single repetition, and the repetition has a different name than the
        alternative. Such as:

            statement ::=
                {ListStatement} (listStatementElement*):elements
                | {SingleStatement} singlestatementPrefix listStatementElement

    - might use a common syntax for alternative names and precedences:

        statement ::=
            (listStatementElement*):elements {precedence: foo; name: ListStatement}
            | singlestatementPrefix listStatementElement {precedence: bar; name: SingleStatement}

        or

        statement ::=
            (listStatementElement*):elements %name ListStatement
            singlestatementPrefix listStatementElement %name SingleStatement

    - might use the expands-to symbol again

        statement ::=
            ListStatement ::= (listStatementElement*):elements
            SingleStatement ::= singlestatementPrefix listStatementElement
            ;
    -->
        looks nice, but problem: all alternatives have to be named, otherwise the syntax is ambiguous -- the last
            symbol from the previous alternative could be the next alternative's name. This could be fixed with a
            totally different syntax:

        statement ::= {
            ListStatement ::= (listStatementElement*):elements;
            SingleStatement ::= singlestatementPrefix listStatementElement;
        }

        To keep things more uniform, this syntax could be the single syntax for alternatives. Whole concept:

        The syntax

            symbol ::= foo bar;

        can only be used for single-alternative productions. The nonterminal can still have more than one right-hand
        side since multiple productions can exist for it.

        Multiple alternatives at once must be written this way:

            symbol ::= {
                foo bar;
                fupp baz %precedence foo;
            }

        or

            symbol ::= {
                name1 ::= foo bar;
                name2 ::= fupp baz %precedence foo;
            }

        (has to use expands-to, not colon, since the latter would be ambiguous again).

        Another variant: There is no multiple-production syntax. Multiple productions must always be toplevel:

        symbol ::= foo bar;
        symbol ::= fupp baz %precedence foo;

        symbol:name1 ::= foo bar;
        symbol:name2 ::= fupp baz %precedence foo;

        but this doesn't look nice since the name has to be repeated. This is also cumbersome for refactoring.


    The syntax variant I like most is:

        Multiple alternatives at once must be written this way:

            symbol ::= {
                foo bar;
                fupp baz %precedence foo;
            }

        or

            symbol ::= {
                name1 ::= foo bar;
                name2 ::= fupp baz %precedence foo;
            }

        Single alternatives can optionally be written in a shorter way:

            symbol ::= foo bar;

        But this doesn't allow naming, even though multiple single-alternative productions can build up a
        multi-alternative nonterminal. Or maybe ot can allow naming:

            symbol:name1 ::= foo bar;

    --> that looks good. The only change necessary in the application classes is that an alternative has an optional
        name that is used only for code generation. To simplify things, this name is optional until the end; the
        code generator generates a name if none is defined.

------

Just an idea: Why not demand that everything important has a name. This solves all name-changing problems and thus
    all name generation problems:

- if a nonterminal has multiple alternatives, then they must be named
- if a nonterminal has only a single alternative, then it cannot be named
- the input syntax enforces this. As a side effect, the input syntax cannot allow to split the production of a
    nonterminal into multiple productions.
- if a right-hand symbol should be accessible then it must be named (though generic PSI traversal is still possible)
- (similar for named expressions)
-->
- solution: do not enforce naming, but use a simple generated naming scheme that is ugly enough to encourage naming.
    Especially, do not build sophisticated naming generation.

------

Implicit names:

    calculation ::= statement*

could be implicitly named:

    calculation ::= (statement*):statements

Questions:
- should this happen on the basis of the extended grammar? Or the canonical grammar? Or afterwards?
    --> the repetition is only explicit in the extended grammar. Unless repetition detection is used, this can
        only happen in the explicit grammar.
    --> this has the added bonus of using the inferred name for the synthetic nonterminal too.
