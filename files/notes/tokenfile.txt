

- don't "group" tokens by some user-provided string like GrammarKit does. Also don't use the token's text for that
	(easily creates unwanted grouping)

- the user might have to define token "families" of some kind, e.g. "keyword" and "operator". A typical use case is
	uniform syntax highlighting of all members of a family.

- token codes are assigned by the parser generator, so however that happens, it cannot happen in user code.

- token codes are 0+ counted integers, so it would be possible to list all the IElementTypes in a list / array and
  map token codes by using indexOf(). Since at parse time the mapping happens vis the IElementType's index property,
  indexOf() is only called on the array at startup so performance is not a problem.
	--> sounds like a good solution.
	--> This table can be generated into the parser class. It could be accessible via a static method, but there is
		actually no reason to know the token codes outside the parser.
			--> lexer?
				--> no, the lexer returns the IElementType objects, which are mapped to token codes by the parser.


