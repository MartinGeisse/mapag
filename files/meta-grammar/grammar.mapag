
%terminals {
    KW_TERMINALS, KW_NONTERMINALS, KW_PRECEDENCE, KW_LEFT, KW_RIGHT, KW_NONASSOC, KW_START, KW_RESOLVE, KW_SHIFT, KW_REDUCE, KW_EOF, KW_ERROR,
    OPENING_CURLY_BRACE, CLOSING_CURLY_BRACE, OPENING_PARENTHESIS, CLOSING_PARENTHESIS,
    COMMA, SEMICOLON, COLON, EXPANDS_TO, QUESTION_MARK, ASTERISK, PLUS, BAR,
	IDENTIFIER,
	BLOCK_COMMENT, LINE_COMMENT // never passed to the parser
}

%nonterminals {
    grammar, precedenceDeclaration,
	production, rightHandSide, expression, resolveDeclaration, resolveDeclarationSymbol,
	nonemptyIdentifierList
}

%start grammar;


//
// grammar
//

grammar ::=
	KW_TERMINALS OPENING_CURLY_BRACE nonemptyIdentifierList CLOSING_CURLY_BRACE
	KW_NONTERMINALS OPENING_CURLY_BRACE nonemptyIdentifierList CLOSING_CURLY_BRACE
	(KW_PRECEDENCE OPENING_CURLY_BRACE precedenceDeclaration* CLOSING_CURLY_BRACE)?
	KW_START IDENTIFIER:startSymbolName SEMICOLON
	production+
	;

precedenceDeclaration ::= (KW_LEFT | KW_RIGHT | KW_NONASSOC) nonemptyIdentifierList SEMICOLON;


//
// productions
//

production ::= {
	single ::= IDENTIFIER (COLON IDENTIFIER)? EXPANDS_TO rightHandSide SEMICOLON
	multi ::= IDENTIFIER EXPANDS_TO OPENING_CURLY_BRACE ((IDENTIFIER EXPANDS_TO)? rightHandSide SEMICOLON)* CLOSING_CURLY_BRACE
	error ::= error SEMICOLON
}

rightHandSide ::= {
    withoutResolver ::= expression
    withPrecedenceResolver ::= expression KW_PRECEDENCE IDENTIFIER
    withExplicitResolver ::= expression KW_RESOLVE OPENING_CURLY_BRACE resolveDeclaration* CLOSING_CURLY_BRACE
}

resolveDeclaration ::= (KW_SHIFT | KW_REDUCE) resolveDeclarationSymbol (COMMA resolveDeclarationSymbol)* SEMICOLON;

resolveDeclarationSymbol ::= {
    identifier ::= IDENTIFIER;
    eof ::= KW_EOF;
}

// TODO ambiguous; resolve using %resolve declarations
expression ::= {
    identifier ::= IDENTIFIER
    sequence ::= expression expression
    or ::= expression BAR expression
    zeroOrMore ::= expression ASTERISK
    oneOrMore ::= expression PLUS
    optional ::= expression QUESTION_MARK
    parenthesized ::= OPENING_PARENTHESIS expression+ CLOSING_PARENTHESIS
    named ::= expression COLON IDENTIFIER
}

//
// helpers
//

nonemptyIdentifierList ::= IDENTIFIER (COMMA IDENTIFIER)*;
