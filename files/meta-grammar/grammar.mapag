
%package name.martingeisse.mapag.input;
%class MapagGeneratedMapagParser;

%terminals {
    KW_PACKAGE, KW_CLASS, KW_TERMINALS, KW_NONTERMINALS, KW_PRECEDENCE, KW_LEFT, KW_RIGHT, KW_NONASSOC, KW_START,
    OPENING_CURLY_BRACE, CLOSING_CURLY_BRACE, OPENING_PARENTHESIS, CLOSING_PARENTHESIS,
    DOT, COMMA, SEMICOLON, COLON, EXPANDS_TO, QUESTION_MARK, ASTERISK, PLUS,
	IDENTIFIER
}

%nonterminals {
    grammar, symbolDefinitions, symbolDefinition, precedenceList, precedenceDeclaration,
	productionList, production, expression, hierarchicalIdentifier, nonemptyIdentifierList
}

%precedence {
    %left BAR;
    %nonassoc QUESTION_MARK, ASTERISK, PLUS;
}

%start grammar;


//
// grammar
//

grammar ::=
	KW_PACKAGE (IDENTIFIER DOT)* IDENTIFIER SEMICOLON
	KW_CLASS IDENTIFIER:className SEMICOLON
	KW_TERMINALS OPENING_CURLY_BRACE nonemptyIdentifierList CLOSING_CURLY_BRACE
	KW_NONTERMINALS OPENING_CURLY_BRACE nonemptyIdentifierList CLOSING_CURLY_BRACE
	(KW_PRECEDENCE OPENING_CURLY_BRACE precedenceDeclaration* CLOSING_CURLY_BRACE)?
	(KW_START IDENTIFIER:startSymbolName SEMICOLON)?
	production+
	;

precedenceDeclaration ::=
    (KW_LEFT | KW_RIGHT | KW_NONASSOC) nonemptyIdentifierList SEMICOLON
    ;


//
// productions
//

production ::=
	IDENTIFIER COLON_COLON_EQUALS expression SEMICOLON
	| error SEMICOLON
	;

expression ::=
	IDENTIFIER (COLON IDENTIFIER)?
	| expression+
	| expression BAR expression
	| expression ASTERISK
	| expression PLUS
	| expression QUESTION_MARK
	| OPENING_PARENTHESIS expression CLOSING_PARENTHESIS (COLON IDENTIFIER)?
	;


//
// helpers
//

nonemptyIdentifierList ::=
	IDENTIFIER
	| nonemptyIdentifierList COMMA IDENTIFIER
	;
