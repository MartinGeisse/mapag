
%terminals {

	// grammar keywords
    KW_TERMINALS, KW_PRECEDENCE, KW_LEFT, KW_RIGHT, KW_NONASSOC, KW_START,

    // production keywords
    KW_RESOLVE, KW_SHIFT, KW_REDUCE, KW_EOF, KW_ERROR, KW_REDUCE_ON_ERROR,

	// parentheses, braces and brackets
    OPENING_CURLY_BRACE, CLOSING_CURLY_BRACE, OPENING_PARENTHESIS, CLOSING_PARENTHESIS,

    // punctuation
    COMMA, SEMICOLON, COLON, EXPANDS_TO, QUESTION_MARK, ASTERISK, PLUS, BAR,

    // identifiers
	IDENTIFIER,

	// comments (never passed to the parser, but unlike whitespace we need them in the symbols holder class because
	// IntelliJ doesn't define a generic IElementType for comments)
	BLOCK_COMMENT, LINE_COMMENT

}

%start grammar;


//
// grammar
//

grammar ::=
	KW_TERMINALS OPENING_CURLY_BRACE terminalDeclarations:terminals CLOSING_CURLY_BRACE
	(KW_PRECEDENCE OPENING_CURLY_BRACE precedenceDeclaration*:precedenceDeclarations CLOSING_CURLY_BRACE)?:precedenceTable
	KW_START IDENTIFIER:startSymbolName SEMICOLON
	production+:productions
	;

terminalDeclarations ::= (terminalDeclaration, COMMA)+:identifiers;

terminalDeclaration ::= IDENTIFIER:identifier;

precedenceDeclaration ::= (KW_LEFT:left | KW_RIGHT:right | KW_NONASSOC:nonassoc):associativity (IDENTIFIER, COMMA)+:terminals SEMICOLON;


//
// productions
//

production ::= {
	singleUnnamed ::= IDENTIFIER:nonterminalName EXPANDS_TO rightHandSide:rightHandSide SEMICOLON;
	singleNamed ::= IDENTIFIER:nonterminalName COLON IDENTIFIER:alternativeName EXPANDS_TO rightHandSide:rightHandSide SEMICOLON;
	multi ::= IDENTIFIER:nonterminalName EXPANDS_TO OPENING_CURLY_BRACE (
	        (rightHandSide:rightHandSide SEMICOLON):unnamed |
	        (IDENTIFIER:alternativeName EXPANDS_TO rightHandSide:rightHandSide SEMICOLON):named
	    )*:alternatives CLOSING_CURLY_BRACE;
	error1 ::= %error SEMICOLON;
	error2 ::= %error %eof;
	error3 ::= IDENTIFIER:nonterminalName EXPANDS_TO %error SEMICOLON;
	error4 ::= IDENTIFIER:nonterminalName EXPANDS_TO %error %eof;
}

rightHandSide ::= expression:expression alternativeAttribute*:attributes;

alternativeAttribute ::= {
	precedence ::= KW_PRECEDENCE IDENTIFIER:precedenceDefiningTerminal;
	resolveBlock ::= KW_RESOLVE OPENING_CURLY_BRACE resolveDeclaration*:resolveDeclarations CLOSING_CURLY_BRACE;
	reduceOnError ::= KW_REDUCE_ON_ERROR;
	eof ::= KW_EOF;
}

resolveDeclaration ::= (KW_SHIFT:shift | KW_REDUCE:reduce):action (IDENTIFIER, COMMA)+:symbols SEMICOLON;

expression ::= {
    identifier ::= IDENTIFIER:identifier %reduceOnError;
    error ::= KW_ERROR;
    sequence ::= expression:left expression:right %resolve {
		%shift QUESTION_MARK, ASTERISK, PLUS, COLON;
		%reduce OPENING_PARENTHESIS, IDENTIFIER, KW_ERROR, BAR;
    };
    or ::= expression:left BAR expression:right %resolve {
		%shift QUESTION_MARK, ASTERISK, PLUS, COLON, OPENING_PARENTHESIS, IDENTIFIER, KW_ERROR;
		%reduce BAR;
    };
    zeroOrMore ::= expression:operand ASTERISK;
    oneOrMore ::= expression:operand PLUS;
    separatedZeroOrMore ::= OPENING_PARENTHESIS expression:element COMMA expression:separator CLOSING_PARENTHESIS ASTERISK;
    separatedOneOrMore ::= OPENING_PARENTHESIS expression:element COMMA expression:separator CLOSING_PARENTHESIS PLUS;
    optional ::= expression:operand QUESTION_MARK;
    parenthesized ::= OPENING_PARENTHESIS expression:inner CLOSING_PARENTHESIS;
    named ::= expression:expression COLON IDENTIFIER:expressionName;
}
