package $packageName;

import com.intellij.lang.ASTNode;
import com.intellij.lang.LightPsiParser;
import com.intellij.lang.PsiBuilder;
import com.intellij.lang.PsiParser;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.impl.source.tree.LeafPsiElement;
import com.intellij.extapi.psi.ASTWrapperPsiElement;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.common.collect.ImmutableList;

public final class InternalPsiUtil {

	// prevent instantiation
	private InternalPsiUtil() {
	}

    /**
     * This method works similar to parent.getChildren()[childIndex], except that it deals with all nodes, not just
     * subclasses of CompositeElement.
     */
	public static PsiElement getChild(ASTDelegatePsiElement parent, int childIndex) {
        PsiElement child = parent.getFirstChild();
        for (int i = 0; i < childIndex; i++) {
            child = child.getNextSibling();
        }
        return child;
	}

}
