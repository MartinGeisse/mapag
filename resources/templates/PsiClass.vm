package $packageName;

#if($intellij)
import com.intellij.lang.ASTNode;
import com.intellij.lang.ASTWrapperPsiElement;
import com.intellij.lang.LightPsiParser;
import com.intellij.lang.PsiBuilder;
import com.intellij.lang.PsiParser;
import com.intellij.psi.TokenType;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiNamedElement;
import com.intellij.psi.PsiNameIdentifierOwner;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.impl.source.tree.LeafPsiElement;
import org.jetbrains.annotations.NotNull;
import com.intellij.util.IncorrectOperationException;
import com.intellij.psi.PsiReference;
import com.google.common.collect.ImmutableList;
#end

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public $classModifiers class $className extends $superclass $interfaces {

    public $className($notNull ASTNode node) {
        super(node);
    }

    #foreach($nodeGetter in $nodeGetters)
    public $nodeGetter.nodeType ${nodeGetter.getterName}() {
            return ($nodeGetter.nodeType)InternalPsiUtil.getChild(this, $nodeGetter.childIndex);
        }
    #end

    #if($intellij)
    
        #if($customNameImplementation)

            public String getName() {
                return ${psiUtilClass}.getName(this);
            }

            public PsiElement setName(String newName) throws IncorrectOperationException {
                return ${psiUtilClass}.setName(this, newName);
            }

        #end
        #if($customNameIdentifierImplementation)

            #if($customNameImplementation)

                public PsiElement getNameIdentifier() {
                    return ${psiUtilClass}.getNameIdentifier(this);
                }

            #else

                public LeafPsiElement getNameIdentifier() {
                    return ${psiUtilClass}.getNameIdentifier(this);
                }

                public String getName() {
                    LeafPsiElement nameIdentifier = getNameIdentifier();
                    return (nameIdentifier == null ? null : nameIdentifier.getText());
                }

                public PsiElement setName(String newName) throws IncorrectOperationException {
                    LeafPsiElement nameIdentifier = getNameIdentifier();
                    if (nameIdentifier == null) {
                        throw new IncorrectOperationException("name identifier not found");
                    }
                    return (LeafPsiElement) nameIdentifier.replaceWithText(newName);
                }

            #end

        #end

        #if($supportsGetReference)
            public PsiReference getReference() {
                return ${psiUtilClass}.getReference(this);
            }
        #end

        #if($safeDeleteBase)
            public void superclassDelete() throws IncorrectOperationException {
                super.delete();
            }
        #end

        #if($safeDeleteImplementation)
            public void delete() throws IncorrectOperationException {
                ${psiUtilClass}.delete(this);
            }
        #end

    #end
}
