package name.martingeisse.mapag.input;

import com.intellij.psi.PsiElement;
import com.intellij.psi.impl.source.tree.LeafPsiElement;
import name.martingeisse.mapag.grammar.extended.*;
import name.martingeisse.mapag.grammar.extended.expression.Expression;
import name.martingeisse.mapag.ide.MapagAnnotator;
import name.martingeisse.mapag.input.psi.PrecedenceDeclaration;
import name.martingeisse.mapag.input.psi.RightHandSide;

import java.util.HashMap;
import java.util.Map;

/**
 * This object is generated by the {@link PsiToGrammarConverter} along with the converted grammar to allow the caller
 * to find the PSI nodes for generated grammar elements. This is used by the {@link MapagAnnotator} to place error
 * markers.
 */
public final class GrammarToPsiMap {
	public final Map<TerminalDeclaration, name.martingeisse.mapag.input.psi.TerminalDeclaration> terminalDeclarations = new HashMap<>();
	public final Map<PrecedenceTable.Entry, PrecedenceDeclaration> precedenceTableEntries = new HashMap<>();
	public LeafPsiElement startSymbol;
	public final Map<Production, name.martingeisse.mapag.input.psi.Production> productions = new HashMap<>();
	public final Map<Alternative, PsiElement> alternatives = new HashMap<>();
	public final Map<Alternative, RightHandSide> rightHandSides = new HashMap<>();
	public final Map<ResolveDeclaration, name.martingeisse.mapag.input.psi.ResolveDeclaration> resolveDeclarations = new HashMap<>();
	public final Map<Expression, name.martingeisse.mapag.input.psi.Expression> expressions = new HashMap<>();
}
