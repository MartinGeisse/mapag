package $packageName;

import com.google.common.collect.ImmutableList;

import ${basePackageName}.cm.CmNode;
import ${basePackageName}.cm.CmList;

import java.util.List;
import java.util.function.Consumer;
import java.util.ArrayList;

public final class CmListImpl<T extends CmNode> extends CmNodeImpl implements CmList<T> {

    private final IElementType[] elementTypes;
    private final Class<T> elementClass;
    private final List<T> elements;

    public CmListImpl(IElementType[] elementTypes, Class<T> elementClass, Object[] reduction) {
        this.elementTypes = elementTypes;
        this.elementClass = elementClass;
        this.elements = ;

        /*
        TODO handle mergeable sublists here


        InternalPsiUtil.foreachChild(this, child -> {
            #if($intellij)
                if (elementTypes.contains(child.getNode().getElementType())) {
                    consumer.accept(elementClass.cast(child));
                    return;
                }
            #else
                IElementType childType = child.getNode().getElementType();
                for (IElementType elementType : elementTypes) {
                    if (childType == elementType) {
                        consumer.accept(elementClass.cast(child));
                        return;
                    }
                }
            #end
            if (child instanceof CmListImpl<?> && child.getNode().getElementType() == getNode().getElementType()) {
                CmListImpl<?> typedChild = (CmListImpl<?>)child;
                typedChild.cast(elementClass).foreach(consumer);
            }
        });

        */
    }

    public <S extends CmNode> CmListImpl<S> cast(Class<S> subclass) {
        if (!elementClass.isAssignableFrom(subclass)) {
            throw new ClassCastException(subclass.getName() + " is not a subclass of " + elementClass.getName());
        }
        return (CmListImpl)this;
    }

    public final List<T> getAll() {
        List<T> list = new ArrayList<>();
        addAllTo(list);
        return list;
	}

	public final void addAllTo(List<T> list) {
        foreach(list::add);
	}

	public final void addAllTo(ImmutableList.Builder<T> builder) {
        foreach(builder::add);
	}

    public final void foreach(Consumer<T> consumer) {
        for (T element : elements) {
            consumer.accept(element);
        }
    }

}
