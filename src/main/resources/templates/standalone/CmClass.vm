package $packageName;

import com.intellij.lang.ASTNode;
import com.intellij.extapi.psi.ASTWrapperPsiElement;
import com.intellij.lang.LightPsiParser;
import com.intellij.lang.PsiBuilder;
import com.intellij.lang.PsiParser;
import com.intellij.psi.TokenType;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiNamedElement;
import com.intellij.psi.PsiNameIdentifierOwner;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.impl.source.tree.LeafPsiElement;
import org.jetbrains.annotations.NotNull;
import com.intellij.util.IncorrectOperationException;
import com.intellij.psi.PsiReference;
import com.google.common.collect.ImmutableList;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import ${cmPackageName}.*;

public $classModifiers class $className extends $superclass $interfaces {

    public $className(@NotNull ASTNode node) {
        super(node);
    }

    #foreach($nodeGetter in $nodeGetters)
	    public $nodeGetter.nodeTypeCm ${nodeGetter.getterName}() {
            return ($nodeGetter.nodeTypeCm)InternalPsiUtil.getCmFromPsi(InternalPsiUtil.getChild(this, $nodeGetter.childIndex));
        }

    	public $nodeGetter.nodeTypePsi ${nodeGetter.getterName}Psi() {
            return ($nodeGetter.nodeTypePsi)InternalPsiUtil.getChild(this, $nodeGetter.childIndex);
        }
    #end

}
