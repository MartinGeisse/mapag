package ${packageName};

import java.util.concurrent.atomic.AtomicInteger;

public class IElementType {

    public static final IElementType BAD_CHARACTER = new IElementType("%badchar", null);

	private static final AtomicInteger INDEX_ALLOCATOR = new AtomicInteger();

	private final int index;
	private final String debugName;
	private final CmNodeFactory cmNodeFactory;

	public IElementType(String debugName, CmNodeFactory cmNodeFactory) {
		this.index = INDEX_ALLOCATOR.getAndIncrement();
		this.debugName = debugName;
		this.cmNodeFactory = cmNodeFactory;
	}

	public int getIndex() {
		return index;
	}

	public String getDebugName() {
		return debugName;
	}

	public CmNodeFactory getCmNodeFactory() {
	    return cmNodeFactory;
	}

	@Override
	public int hashCode() {
		return index;
	}

	@Override
	public String toString() {
		return debugName;
	}

    public interface CmNodeFactory {
        CmNode createCmNode(Object[] childNodes);
    }

}
