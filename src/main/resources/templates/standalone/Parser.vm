
#set($intellij = false)
#set($badCharacterElementType = "IElementType.BAD_CHARACTER")

#define($imports)
import ${cmPackageName}.CmNode;
import ${cmImplPackageName}.IElementType;
import ${cmImplPackageName}.CmTokenImpl;
#end

#define($implements)
#end

#define($declarations)

    private void beginSpeculativeTokenConsumption() {
        tokenMarker = tokenPointer;
    }

    private void endSpeculativeTokenConsumption() {
        tokenPointer = tokenMarker;
    }

    private CmTokenImpl getToken() {
        return tokenPointer >= tokens.length ? null : tokens[tokenPointer];
    }

    private CmTokenImpl getLocationToken() {
        return tokenPointer >= tokens.length ? tokens[tokens.length - 1] : tokens[tokenPointer];
    }

    private IElementType getTokenType() {
        return tokenPointer >= tokens.length ? null : tokens[tokenPointer].getElementType();
    }

    private boolean isAtEof() {
        return tokenPointer >= tokens.length;
    }

    private void nextToken() {
        if (tokenPointer < tokens.length) {
            tokenPointer++;
        }
    }

    private void reportErrorForCurrentToken(String errorMessage) {
		reportError(getLocationToken(), errorMessage);
    }

    protected void reportError(CmTokenImpl locationToken, String message) {
        System.err.println("syntax error in row " + locationToken.getRow() + ", column " + locationToken.getColumn() + ": " + message);
    }

	private CmNode buildCm(Object what) {
	    if (what == null) {
	        CmTokenImpl node = getToken();
            nextToken();
            return node;
	    } else if (what instanceof Object[]) {
			CmTokenImpl locationToken = getLocationToken();
			Object[] reduction = (Object[]) what;
			IElementType elementType;
   			List<CmNode> childNodes = new ArrayList<>();
			if (reduction[0] instanceof ListNodeGenerationWrapper) {
				ListNodeGenerationWrapper listNodeGenerationWrapper = (ListNodeGenerationWrapper)reduction[0];
				elementType = listNodeGenerationWrapper.elementType;
                collectListChildNodes(reduction, elementType, childNodes);
			} else {
				elementType = (IElementType)reduction[0];
                for (int i = 1; i < reduction.length; i++) {
                    childNodes.add(buildCm(reduction[i]));
                }
			}
            return elementType.getCmNodeFactory().createCmNode(locationToken.getRow(), locationToken.getColumn(), childNodes.toArray(new CmNode[0]));
		} else if (what instanceof List<?>) {
			// an object list has the same meaning as an object array (needed for error symbols)
			return buildCm(((List<?>)what).toArray());
		} else if (what instanceof ErrorLocationIndicator) {
		    ErrorLocationIndicator errorLocationIndicator = (ErrorLocationIndicator)what;
			reportErrorForCurrentToken("expected one of: " + STATE_INPUT_EXPECTATION[errorLocationIndicator.state]);
			return null;
		} else if (what instanceof UnrecoverableSyntaxException) {
            reportErrorForCurrentToken(((UnrecoverableSyntaxException)what).getMessage());
            tokenPointer = tokens.length;
			return null;
		} else {
		    throw new RuntimeException("unknown object in raw parse tree: " + what);
        }
	}

    // elementType is the IElementType of the list itself, not of the list's elements
	private void collectListChildNodes(Object[] reduction, IElementType elementType, List<CmNode> childNodeDestination) {
	    for (int i = 1; i < reduction.length; i++) {

            // We have to include valid children here, but exclude separators. To avoid looking for (possibly multiple)
            // IElementTypes of valid children and separators, we make use of the fact that the only way a separator can
            // appear is a (ListNodeGenerationWrapper // remainingList, separator, child) reduction, which is also the
            // only possible reduction with three child nodes (4 array elements including the ListNodeGenerationWrapper).
            if (i == 2 && reduction.length == 4) {
				// run buildCm so the tokens get consumed, but discard the result
				buildCm(reduction[i]);
                continue;
            }

            // check if the reduction item is a list-type reduction of the same IElementTyp, and if so, flatten the lists
	        Object reductionItem = reduction[i];
	        if (reductionItem instanceof Object[]) {
	            Object[] subReduction = (Object[])reductionItem;
	            if (subReduction[0] instanceof ListNodeGenerationWrapper) {
    	            ListNodeGenerationWrapper subWrapper = (ListNodeGenerationWrapper)subReduction[0];
    	            if (subWrapper.elementType == elementType) {
    	                collectListChildNodes(subReduction, elementType, childNodeDestination);
    	                continue;
    	            }
	            }
	        }

	        // default case: just convert the reduction item to a CM node recursively
            childNodeDestination.add(buildCm(reductionItem));

	    }
	}


#end

#parse("templates/include/Parser.vm")

