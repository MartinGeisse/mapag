
#set($intellij = true)
#set($badCharacterElementType = "TokenType.BAD_CHARACTER")

#define($imports)
    import com.intellij.lang.ASTNode;
    import com.intellij.lang.LightPsiParser;
    import com.intellij.lang.PsiBuilder;
    import com.intellij.lang.PsiParser;
    import com.intellij.psi.TokenType;
    import com.intellij.psi.tree.IElementType;
#end

#define($implements)
    implements PsiParser, LightPsiParser
#end

#define($declarations)

    private static final IElementType FILE_ELEMENT_TYPE = $fileElementType;


    private void beginSpeculativeTokenConsumption() {
        speculativeTokenConsumptionMarker = psiBuilder.mark();
    }

    private void endSpeculativeTokenConsumption() {
        speculativeTokenConsumptionMarker.rollbackTo();
    }

    private IElementType getTokenType() {
        return psiBuilder.getTokenType();
    }

    private boolean isAtEof() {
        return psiBuilder.eof();
    }

    private void nextToken() {
        psiBuilder.advanceLexer();
    }

    private void reportErrorForCurrentToken(String errorMessage) {
        psiBuilder.error(errorMessage);
    }

	private void feedPsiBuilder(Object what, IElementType parentElementType) {
	    if (what == null) {
            nextToken();
	    } else if (what instanceof Object[]) {
			Object[] reduction = (Object[]) what;
			IElementType elementType;
			boolean buildMarker;
			if (reduction[0] instanceof ListNodeGenerationWrapper) {
				ListNodeGenerationWrapper listNodeGenerationWrapper = (ListNodeGenerationWrapper)reduction[0];
				elementType = listNodeGenerationWrapper.elementType;
				buildMarker = (parentElementType == null || elementType != parentElementType);
			} else {
				elementType = (IElementType)reduction[0];
				buildMarker = true;
			}
			PsiBuilder.Marker marker = null;
			if (buildMarker) {
				marker = psiBuilder.mark();
			}
			for (int i = 1; i < reduction.length; i++) {
				feedPsiBuilder(reduction[i], elementType);
			}
			if (buildMarker) {
				marker.done(elementType);
			}
		} else if (what instanceof List<?>) {
			// an object list has the same meaning as an object array (needed for error symbols)
			feedPsiBuilder(((List<?>)what).toArray(), parentElementType);
		} else if (what instanceof ErrorLocationIndicator) {
		    ErrorLocationIndicator errorLocationIndicator = (ErrorLocationIndicator)what;
			reportErrorForCurrentToken("expected one of: " + STATE_INPUT_EXPECTATION[errorLocationIndicator.state]);
		} else if (what instanceof UnrecoverableSyntaxException) {
            reportErrorForCurrentToken(((UnrecoverableSyntaxException)what).getMessage());
            while (!isAtEof()) {
            	nextToken();
            }
		}
	}

#end

#parse("templates/include/Parser.vm")

